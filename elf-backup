#!/bin/bash

# Help message
helpmsg=\
"Usage: $0 [arguments]

Where [arguments] can be (in any order):

	- Available to the LaSDPC workstation
		home send         - backup to your home workstation
		home send delete  - same as above, deleting extraneous files
		home get          - get files from home workstation, skipping files newer locally
		local send        - backup to local off-VM workstation
		local send delete - same as above, deleting extraneous files
	
	- Available to the home workstation
		lasdpc send        - send local shared lasdpc folder to the lasdpc workstation
		lasdpc send delete - same as above, deleting extraneous files
		lasdpc get         - get lasdpc files to the local lasdpc folder, skipping files newer locally
";
if [ $# -eq 0 ]; then
	echo "$helpmsg"
	exit 0;
fi


arghome=false
arglocal=false
argsend=false
argget=false
argdelete=false
arglasdpc=false

# ==========================
# Parse User Arguments
# ==========================
while [[ "$#" > 0 ]]; do case $1 in
	home)
		arghome=true;;
	local)
		arglocal=true;;
	send)
		argsend=true;;
	get)
		argget=true;;
	delete)
		argdelete=true;;
	lasdpc)
		arglasdpc=true;;
esac; shift; done;

# Some pre-processing
myip=""
localip="10.0.1.100"
if [ $arghome = "true" ]; then
	myip=$(elf-ip home);
fi

home_s=false
home_sd=false
home_g=false
local_s=false
local_sd=false
lasdpc_s=false
lasdpc_sd=false
lasdpc_g=false

# ==========================
# Decide functionality
# ==========================
if   [[ $arghome = "true" && $argsend = "true" && $argdelete = "false" ]]; then
	echo home send;
	home_s=true;
elif [[ $arghome = "true" && $argsend = "true" && $argdelete = "true" ]]; then
	echo home send delete;
	home_sd=true;
elif [[ $arghome = "true" && $argget = "true" ]]; then
	echo home get;
	home_g=true;
elif [[ $arglocal = "true" && $argsend = "true" && $argdelete = "false" ]]; then
	echo local send;
	local_s=true;
elif [[ $arglocal = "true" && $argsend = "true" && $argdelete = "true" ]]; then
	echo local send delete;
	local_sd=true;
elif [[ $arglasdpc = "true" && $argsend = "true" && $argdelete = "false" ]]; then
	echo lasdpc send;
	lasdpc_s=true;
elif [[ $arglasdpc = "true" && $argsend = "true" && $argdelete = "true" ]]; then
	echo lasdpc send delete;
	lasdpc_sd=true;
elif [[ $arglasdpc = "true" && $argget = "true" ]]; then
	echo lasdpc get;
	lasdpc_g=true;
fi

# ==========================
# Validate hostname
# ==========================
host=$( hostname );
if [[ $arghome = "true" || $arglocal = "true" ]]; then
	if [[ $host != "matheushjs-lasdpc" ]]; then
		echo "ERROR: Command used is only available on LaSDPC workstation!";
		exit 1;
	fi
elif [[ $arglasdpc = "true" ]]; then
	if [[ $host != "matheushjs" ]]; then
		echo "ERROR: Command used is only available on home workstation!";
		exit 1;
	fi
fi


# ==========================
# Execute functionality
# ==========================

echo "
/.*
/bin
/Desktop
/Warehouse
.git
node_modules
.npm
" > /tmp/rsync-exclude-many.txt

# We will only exclude when we are pushing the the original machine.
# When we pull from the original machine, we pull everything.
EXCLUDE="--exclude-from=/tmp/rsync-exclude-many.txt"

# home send
if   [[ $home_s = "true" ]]; then
	rsync -v -az -e "ssh -i $HOME/.ssh/passless" \
		~/ mathjs@$myip:"Shared/lasdpc";

# home send delete
elif [[ $home_sd = "true" ]]; then
	rsync -v -az --delete --ignore-errors -e "ssh -i $HOME/.ssh/passless" \
		~/ mathjs@$myip:"Shared/lasdpc";

# home get
elif [[ $home_g = "true" ]]; then
	rsync -v -auz $EXCLUDE -e "ssh -i $HOME/.ssh/passless" \
		mathjs@$myip:"Shared/lasdpc/" ~/;

# local send
elif [[ $local_s = "true" ]]; then
	rsync -v -az -e "ssh -i $HOME/.ssh/passless" \
		~/ mhjs@$localip:"Shared/lasdpc";

# local send delete
elif [[ $local_sd = "true" ]]; then
	rsync -v -az --delete --ignore-errors -e "ssh -i $HOME/.ssh/passless" \
		~/ mhjs@$localip:"Shared/lasdpc";

# lasdpc send
elif [[ $lasdpc_s = "true" ]]; then
	rsync -v -az $EXCLUDE -e "ssh -p 10000 -i $HOME/.ssh/passless" \
		~/Shared/lasdpc/ mathjs@localhost: ;

# lasdpc send delete
elif [[ $lasdpc_sd = "true" ]]; then
	rsync -v -az $EXCLUDE -e "ssh -p 10000 -i $HOME/.ssh/passless" --ignore-errors \
		~/Shared/lasdpc/ mathjs@localhost: ;

# lasdpc get
elif [[ $lasdpc_g = "true" ]]; then
	rsync -v -auz -e "ssh -p 10000 -i $HOME/.ssh/passless" \
		mathjs@localhost:"./" ~/Shared/lasdpc/;
fi

